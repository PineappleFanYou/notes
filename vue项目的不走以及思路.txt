第一步：使用vue-cli创建脚手架项目
1.上传git
2.项目之前的资源准备
2.1-将老师提供的assets中的资源拷贝到自己项目中的assets中
2.2-将styles中的样式拷贝到自己项目中
2.3-在main.js文件中引入index.less -------import '@/styles/index.less'  由于我们用不到前面的值，所有我们不需要 xxx from这样引入

第二步：项目中引入element-ui
1.下载：npm i element-ui -S
2.引入：引入element-ui和样式----引入和使用都是在main.js
3.使用--use
import ElementUI from 'element-ui'
import 'element-ui/lib/theme-chalk/index.css'
----使用
Vue.use(ElementUI)

第三步：生成数据库
1.找到资源文件
2.新建数据库：itcast
3.数据库》右键》运行sql文件

第四步：路由下载，引入，配置，暴露
1.下载:npm install vue-router
2.引入和使用---在router.js引入+注入
import Vue from 'vue'
import VueRouter from 'vue-router'
---使用
Vue.use(VueRouter)

第五步：添加登陆单文件组件
1.在src文件夹中创建views文件夹
2.在views文件夹内创建login.vue文件
3.暂时就是这些，后续再来写东西

第六步：添加登陆路由
1.在src文件夹内创建router文件夹
2.在router文件夹内创建router.js
3.引入和use --- vue
import Vue from 'vue'
import VueRouter from 'vue-router'
---使用
Vue.use(VueRouter)
4.创建路由对象
export default new VueRouter（{
	routes:[配置一些东西]
}）

第七步：完成登陆单文件组件的页面制作
1.在Element框架中添加需要的组件----form表单----表单验证
2.拷贝你需要的组件代码
3.删除你不要的结构或者设置---这个有很多细节
3.1-添加:model所绑定的对象
loginForm: {
    username: '',
    password: ''
}
3.2-更改v-model="loginForm.username--我们定义了loginForm对象，所以要更改 ---和id有相同作用的唯一标识也要改过来ref="loginForm"
3.3-username和password的这两个名字不能乱取名字，这两个名字是看了api接口才取得
3.4-prop="username" 
3.5- rules: {
        username: [-----这里原本是name,也要改过来
          { required: true, message: '请输入活动名称', trigger: 'blur' },
          { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur' }
        ]

4.添加样式---老师有提供，我们只需要稍微改一改，在外面包一层div,再加一个图片，再把登录的宽度弄成100%

5.实现表单用户数据的二次验证
5.1--当前表单.validate((valid)=>{})可以实现二次验证，当验证完成的时候，会调用一个回调函数，回调函数有一个参数valid,这个值如果为true则说明二次验证通过，否则不通过----这些都是我们在复制的时候，文档里面的methods里面有的，我们要做的就是修改一些东西而已
5.2--在登录button绑定一个点击事件--login
5.3--因为我们在表单添加了唯一标识，所以我们的当前表单就是$refs.loginForm
5.4--判断--如果有vaild，那就是可以发请求，如果没有，那就阻止发请求，return false
5.5-如果没有vaild，我们要给用户一个消息提示，这里element-ui 提供了-Message 消息提示，我们只需要复制就行了

第八步：完成登录业务
1.在src文件夹创建utils公共文件夹，在里面创建myaxios.js文件
2.封装axios文件
2.1-下载安装：$ npm install axios
2.2-引入 import axios from 'axios'
2.3-设置基准路径
2.4-返回一个默认对象，这种默认对象在后期这个文件被引入的时候自动的返回，意味着引入这个只会返回一个默认对象，不用再使用{}来解析接收
export default axios


第九步：创建一个api的文件夹，在里面创建login_index.js
1.引入封装好的axios
2.实现登录验证--其他的那些东西需要看接口文档

第十步：调用接口方法，实现登陆，同进实现路由跳转
1.在login.vue里面引入封装好的axios
2.使用封装好的axios发起post请求
3.传入一个对象，里面有用户名和密码，然后我们发送axios请求去后台判断--promise会返回两个回调函数.then和.catch
3.1-如果判断是===200，那就是登录成功
3.2-如果不是 === 200，那就是登录失败

第十一步：在views文件夹里面创建home.vue的文件
1.里面暂时写首页两个，其他的什么都不要写
2.在router.js那里配置路由
3.在login.vue里面的判断 === 200 里面进行路由跳转 

第十二步：添加导航守卫
1.token:可以实现用户身份验证，它是一个令牌，通过令牌可以确认用户的身份信息
登录成功之后，将token存储在本地
2.导航守卫：vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航
2.1--在main.js里面添加导航全局前置守卫

2.2--router.beforeEach((to,from,next)=>{
to:目标路由对象，里面的一个属性path就是目标路由的path值
1.获取token
2.判断
如果token或者是to.path ===‘/login’,那么就下一步
如果不是，那就重定向
})

第十三步：首页的组件制作
1.制作页面结构
1.1--在Element-ui框架里面有一个Container 布局容器，找到合适的
2.添加左侧菜单栏
2.1--找到菜单组件》》NavMenu导航菜单 》侧栏》》自定义颜色
2.2--修改菜单结构
- 建议：先删除不需要的结构，在代码尽可能少的时候进行菜单项结构的修改
- el-menu：整个菜单项
- el-submenu：菜单的一级子项
- el-menu-item：二级
导航菜单的常见属性

- el-menu的常见属性
  - unique-opened：是否只保持一个子菜单的展开，它的值是bool值
  - default-active：当前激活菜单的 index，这个索引是el-menu-item的索引，必须指定为字符串
  - router：是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转
- el-submenu的常见属性
  - index:唯一标识当前菜单项
- el-menu-item的常见属性
  - index:唯一标识当前菜单子项

3.制作右侧顶部栏
3.1--复制提供的样式
3.2--自己写几个span标签就行，他会自动的排在一行

第十四步：我们要做一个一进入home页面（登录之后，什么都没点的情况下），我们不可能让main主体里面显示空白，至少要写一句欢迎之类的
1.在views文件夹里面创建一个welcome的文件
2.里面就随便写欢迎使用后台管理系统就行了，其他的不用管，也用不到
3.在home中添加嵌套路由，由于我们一开始要显示欢迎的组件，所有要配置一个重定向
4.在哪里配置？我们一登录就要显示，登录之后是跳转首页，所以，我们要把欢迎组件的重定向放在home的路由配置的后面，这样我们就点击登录之后就可以直接跳转到welcome的欢迎字眼，也可以看到后台（因为我们是把welcome组件嵌套在home里面的）

第十五步：  用户列表
1.添加用户列表单文件组件
1.1--新建一个user的文件夹，在里面创建一个users.vue的文件，里面暂时就写一个用户列表
2.路由配置---嵌套路由配置，嵌套在home的路由里面
3.设置导航菜单项的index
3.1--为什么在el-menu（整个菜单项那里，不是子级菜单）-index那里设置？
3.2--因为router：是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转
3.3-进行跳转---index='/home/users'

第十六步：制作用户列表单文件组件 @/views/user/users.vue
1.面包屑
1.1--在Elememt-ui框架里面有，复制以后发现样式有点问题，自己添加一个行内样式
1.2--里面有一参数说明要看一下 -- to:路由跳转对象，同 vue-router 的 to
1.3--在to设置跳转的路由

第十七步：搜索框+按钮
1在Elememt-ui框架里面有,input输入框>复合型输入框
2.添加按钮，也是框架里面有

第十八步：用户数据展示
1.基础表格的添加，在Elememt-ui框架里面找到添加
2.添加属性边框--这个简单，默认情况下，Table 组件是不具有竖直方向的边框的，如果需要，可以使用border属性，它接受一个Boolean，设置为true即可启用。所以直接加一个border即可
3.添加索引列，在框架里面找到相对应的，放在table里面的第一列即可
4.添加一列，用作为--用户状态，然后删除prop="address" ，因为这个用不到，在框架里面找到switch开关
<el-switch active-color="#13ce66" inactive-color="#ff4949"></el-switch>然后放在里面，就会出现开关的标志，后续的属性再来添加，用template标签包裹
5.再添加一列，这个是最后的操作页，这个最后的一列我们要添加table表格里面的自定义模板里面的“操作”
5.1--为什么不是添加其他的普通的列？
5.2--因为自定义模板里面有一个‘slot-scope’，通过‘slot-scope’可以获取到 row, column, $index 和 store（table 内部的状态管理）的数据，就是说我们后面如果要点击编辑，分配角色，删除，这些都是要获取数据的，到时候我们就可以通过这些获取了，为我们省了很多麻烦
slot-scope="scope"：设置数据插槽，scope就是当前行对象
- 插槽必须包裹在template模板结构中
scope.row就是当前行数据对象，我们能够轻松的获取当前行的数据对象，便于后期的操作
5.3--由于刚才的自定义模板添加的列的样式不太好看，所以我们在框架里面的button 按钮里面找到'图标按钮'，换成那三个图标按钮即可
5.4--由于只是图片用户不知道是什么来的，所以我们应该当鼠标移到图片的时候，显示是什么来的，在框架里面有个Tooltip 文字提示，用这个包裹着按钮，按钮就会有提示

第十九步：用户数据的展示-功能展示
1.在api文件夹里面创建一个user_index.js的文件
2.在文件里面调用封装好的接口
3.然后在看文档写axios
4.在user.vue文件中引入刚才写好的接口
5.我们不要那些在data()函数对象中复制的数组对象，把他们全部删掉，然后，把数组对象的名字改成userList,先放着，是一个空数组
6.在data（）函数对象里面定义一个新成员userobj{},看文档，里面有三个参数，分别是：query-查询参数，可以为空pagenum:当前的页码，不能为空，pagesize:每页显示的条数，不能为空，后面两个暂时先写着1和2吧
7.这些数据是一进用户列表就要加载的，所以只有钩子函数符合，在钩子函数里面调用刚才引入的接口，然后接受两个和回调函数，先打印出来看一下，发现为空。。。，做下一步。。。打印出来，发现data写着'无效token'

第二十步：添加axios拦截器（重点）--解决无效token的问题
在接口文档里面明确写着：（分析）
1.API V1 认证统一使用 Token 认证
2.需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌
3.这上面两条的意思就是，每次请求都要认证有没有token
4.所以我们需要在每一个授权api请求的时候，设置请求头（每一个）
5.在请求头中设置key为Authorization,值为token(这两个是接口文档规定的，不能更改)
6.我们需要在每次请求的请求头中设置一个Authorization，值为token
7.初步想法：为axios添加一个拦截器，拦截每一次请求，判断是否有token数据，如果有则设置请求头
做法：
1.打开vue的axios文档，里面有一个拦截器，我们只需要的添加请求时的拦截器，复制，然后放在封装的axios.js里面
2.打印出config来看看里面有什么东西，发现里面有一个headers请求头
3.获取token,我们已经存储了token,所以可以直接获取--localStorage.getItem('当时存储时的名字')
4.判断一下是否有token 
5.如果有，设置请求头（config.headers是一个对象）
6.config.headers.Authorization = mytoken------这里为什么点Authorization?看分析的第2条，必须在请求头中使用 Authorization 字段提供 token 令牌，这么写的目的是，在发请求的时候带上名字叫Authorization请求头，后端就是通过接受这个请求头里的值来进行判断是否是合法用户，通过点就可以在这个对象里创建新属性--可以打开Network看一下，在请求头（Request Headers）里面确实有Authorization这个令牌
7.设置完拦截器之后，返回user,vue里面处理，这里要判断，如果是有效的token（===200），那就是我们在上面data()函数对象里面定义的userList = 我们拿到的users数组 -- res.data.data.users(这些都要打印出来才能点正确)
8.如果status === 400,那就是无效的token,那就给一个错误提示，而且强制跳转到登录页面,这个$message是element-ui里面的内置成员，只要我们下载引入了，就有这个东西
9.分析：为什么我们存储了token,还会有无效的token,因为这个token是有一个有效期的，那就是24小时，不可能永久保存的
10.分析：
10.1--表格常见属性
:data：表格数据源，它是一个数组
表格列的常见属性
label：列属性-列标题
prop：设置这一列需要展示数据源属性名称
11.修改 --:data='userList',修改prop和label,换成我们要的，用户名，邮箱，手机号（可以看接口文档来改，也可看打印出来的来改，总之，这个修改的propd的数据源属性名称要和后台给的一致）
12.更改用户状态，我们在上面中，有做一个switch的数据绑定，而且还加了一个template的标签包裹，我们每一行中的switch的数据应该来自于这一行的数据对象，所以我们通过scope.row来获取数据进行v-model的绑定
12.1--所以我们在template标签中加入一个slot-scope="scope"，然后通过scope.row获取当前行数据对象
12.2--v-model='scope.row.mg_state',然后把之前定义的status删掉，这个mg_state是打印出来，数组对象里面有这个的，里面写着true,不是我们凭空捏造的


第二十一步：搜索功能-用户的书籍搜索
1.将获取数据的操作封装成一个函数，因为我们搜索，就是在搜索关键字，this.userobj中已经包含了搜索关键字，我们当时这个对象里面有一个query,这个query参数是后台规定，我们当时定义成员对象的时候也放进去了，所以我们在钩子函数一加载获取数据的时候，我们可以封装成一个函数，我们一加载的时候要获取数据，搜索的时候也要获取数据，所以干脆封装成一个函数，然后进行调用，不过有一点要注意，只能在methods方法里面封装，钩子函数是自动触发的，不能调用
2.在搜索按钮里面添加一个事件
3.实现按下enter键进行搜索
3.1--我们需要使用native作为文本框组件添加原生事件
3.2我们的事件修饰符中，有一个.native修饰符，.native - 监听组件根元素的原生事件
4.直接在el-input标签里面添加一个事件: @keydown.enter.native='init'

第二十二步：分页结构的制作和分页功能的展示
1.在element-ui框架里面找到pagination 分页，下面有一个完整功能，复制那一段，再复制下面那一段的methods里面方方法
2.修改框架里面的一些值，current-page="userobj.pagenum"--当前页码，page-size="userobj.pagesize"---每页显示的条数
3.获取到记录总数total,当我们加载成功的时候获取，就是在init()函数里面写，打印出来，里面有一个total值，我们要先在data()对象里面定义一个total,写什么都行，我们是要在框架里面的总记录数改成total
4.分页功能，我们在复制框架的时候复制了一段下面的methods里面的方法，那两个就是
4.1--当切换sizes下拉列表时触发的函数
4.2--当切换当前页码触发的函数
4.3--修改参数
this.userobj.pagesize = val 
4.4--重新发送请求，因为我们换了页数或者说一页换了几条记录，都是要重新请求数据的
this.init()

第二十二步：添加新用户
1.在Element-ui框架-From表单-表单验证，复制那里面的框架，然后再自己修改一下
2.修改的地方：
2.1--title,   addDialogFormVisible, :model, label, :label-width="'80px'",添加验证规则：:rules='rules' ,标识：ref='addForm',输入框内数据绑定的名字，比如：addForm.username,
2.2--在确定按钮添加点击事件
2.3--搜索区域的添加用户按钮那里添加@click="addDialogFormVisible = true"，意思是一点击就弹出新增用户框
3.在data（）函数对象里面定义一个新成员addForm对象，里面有四个键值对，看文档
4.把addDialogFormVisible: false,因为一开始隐藏的，点击才是弹出来
5.添加调用后台接口的方法，看接口文档
6.在vue组件中调用方法实现新增
7.实现二次认证
8.如果成功，弹出提示框，刷新页面，然后让新增用户框消失，再然后清空表单元素的数据--重置表单元素
9.失败也要弹框
10.不填数据也要弹框，不填数据就是那个没有vaild那里

第二十二步：编辑用户
1.也是要用框架，和新增用户差不多，那些都要改
1.1--区别是：删掉密码那一整块，我们不能让用户更改密码
1.2-- 给用户名框加一个 disabled 和 style=‘width:100px’,用户名也不能更改
2.给编辑按钮添加一个@click='showGrantDialog(scope.row)，这里传入参数，是因为slot-scope可以拿到行内数据
这样我们就可以知道编辑的是哪一条数据，这里传入的是实参，获取当前行数据==通过自定义模板中的slot-scope
3.也是在data（）函数对象里面定义一个新成员editForm对象，里面有四个键值对，看文档,把密码换成id，因为我们不能让用户更改客户密码，不然这样用户权利就太大了
4.实现数据的默认展示--为编辑按钮绑定事件并传递参数，也就是2步骤那里
5.实现数据默认展示--弹出编辑对话框
弹出编辑对话框，然后把数据拿到，所以要有一个点击之后的方法
showEditDialog (row) {
    this.editDialogFormVisible = true---点击之后显示编辑框
    this.editForm.id = row.id---获得id
    this.editForm.username = row.username-用户名
    this.editForm.email = row.email-邮箱
    this.editForm.mobile = row.mobile-电话
}
6.调用接口方法实现数据的编辑--也是和新增用户的一样

第二十二步：修改用户状态
1.添加接口方法，传入参数的时候要注意，我们要传入两个参数，根据后台的接口文档来传入，然后请求路径是拼接
2.找到el-switch，给它添加一个@change="changeState(scope.row.id,scope.row.mg_state)"
事件说明：change --switch 状态发生变化时的回调函数，switch 官方规定只能使用change事件
                 scope.row.id 当前行数据的id，我们要知道我们是修改的哪一个用户状态 -->
                 scope.row.mg_state 用户布尔值，true  or  false, mg_state打印出来就知道了
因为后台要我们传入两个参数，所以我们要获取到当前行的两个数据，一个id，一个true 或 false
3.在事件内部实现对接口方法的调用，这里要传入两个形参，调用接口的时候也要传入两个形参，其他的和以前一样，成功，失败，不过不需要重置和清空

第二十三步：根据id删除用户
1.实现接口方法的添加--根据文档来传入参数
2.在删除按钮添加点击事件，获取行数数据的id
3.vue组件中调用接口方法
3.1-去element-ui框架那里，那里有删除的弹框提示
3.2根ID删除用户，在复制的框架里面写，和其他上面的步骤一样
成功，失败，就是那些
4.在弹出删除成功提示框之后，我们判断userList这个数组，是否是 === 1，而且还要判断当前的页面是否大于1，就是说是不是只有一页了，如果只剩下最后一页了，那就不能再执行后续的操作了，如果大于1，那么久让当前的页面减减


第二十三步：分配角色
1.后台接口方法--实现分配角色，看文档，要传入两个参数，其中一个要拼接，注意点是：传入一个data,--id拿来拼接请求路径，还有一个是data:{ rid:data.rid }传入对象
2.vue组件中--添加分配角色的对话框
2.1-先去Dialog 对话框那里--自定义内容--打开嵌套表单的Dialog，复制这些，然后把活动区域给删掉
2.2--再去select 选择器那里---可清空单选，复制，放在刚才删掉的活动区域那里
// v-model="value":进行选项选择之后，:value的值会自动的赋值给v-model的属性
<el-select v-model="value" clearable placeholder="请选择">
    <el-option
               v-for="item in options"
               :key="item.value"
               :label="item.label" // 展示给用户看的字符串--属性
               :value="item.value" // 背后的实际值，给程序员使用的(id)--属性
               ></el-option>
</el-select>
-------------------------------------------------
<el-form-item label="角色：">
    <!-- <el-select v-model="grantForm.rid" clearable placeholder="请选择" @change="getrid"> -->
    <el-select v-model="grantForm.rid" clearable placeholder="请选择">
        <el-option
                   v-for="item in roleList"
                   :key="item.value"
                   :label="item.roleName"
                   :value="item.id"
                   ></el-option>
    </el-select>
</el-form-item>
3.获取所有角色列表数据，实现下拉列表数据的动态加载（重点）
3.1--在api文件夹新建一个role_index.js
3.2--什么时候加载角色列表数据：我们没有必须在每次分配用户角色时重新的获取数据，所以可以加载一次--mounted
4.默认数据的填充
4.1--如何让下拉列表有默认的选项：只要修改了v-model的属性值，就能让这个属性值所对应的选项被选择
4.2--修改后台代码：api-server > services >ManagerService.js
"rid":manager.role_id---就增加这一句就行了，在---retManagers.push里面添加
5.点击打开分配角色的对话框，弹出对话框以后，我们要加载默认数据，原来的数据
6.在分配角色的按钮里面添加一个点击事件showGrantDialog（scope.row）,传入一个参数，获得当前的行内数据
6.1--点击之后，让隐藏框的false变成true
6.2--显示用户名
6.3--id,和rid,rid是我们修改后台之后得到的
7.在弹出框里面确定里面添加一个点击事件，grantUser
8.为了防止服务器崩溃，我们还要判断用户是否选择了角色，选择了才能后续的步骤，如果没有选择，那就是不能继续
9.调用接口，传入参数，然后就是两个回调函数，就是那些常规操作


第二十三步：权限管理--权限列表
1.在views文件夹里面创建一个rigths的文件夹，再创建一个rightList.vue
2.在router里面配置路由
3.在home.vue添加跳转的路由
4.在框架找到面包屑，然后放在rightList.vue，再修改一下文字
5.在框架找到table表格-复制需要的表格
6.在data()里面定义一个rigthList空数组，把table表格复制的data绑定的数据改成rigthList
7.写api接口，传入一个参数，新建一个文件写接口
8.在rightList.vue引入接口，然后调用接口，由于一开始就要加载，所以使用钩子函数
9.看接口文档，要传入一个参数，那就是list，list 列表显示权限,打印出两个回调函数，在更改表格里面的东西
10.在层级里面添加一个自定义模板，里面有一个管道符判断
11.在过滤器那里调用管道符的，然后判断

第二十四步：实现展示数据的动态展示
1.面包屑
2.添加角色的按钮-改名添加角色
3.table 表格---展开行---复制全部结构--然后删除<el-form label-position="left" inline class="demo-table-expand">到</el-form>，其他的还要，删除的位置等一下我们手动添加嵌套结构
4.再加上前面的那个1234索引之类
5.在data()函数对象中，定义一个roleList:[]空数组，然后把这个空数组替换掉 :data="tableData5"的tableData5
6.准备进行嵌套循环生成展开行数据展示结构（这个很重点）
7.Layout 布局---混合布局--借鉴他们的布局和使用他们的标签
8.一级权限分为4和20，用<el-row></el-row>包裹整一个我们手动生成的结构，
8.1--<el-col :span="4">4<el-col>
	<el-col :span="20">20<el-col>
8.2--在tag 标签---可移除标签---<el-tag
  v-for="tag in tags"
  :key="tag.name"
  closable
  :type="tag.type">
  {{tag.name}}
</el-tag>
删掉v-for和  :key="tag.name"  ，把  :type里面的值改为变量，可以用四个变量，success/info/warning/danger
8.3--把这个tag标签放进<el-col :span="4">4<el-col>
8.4--<el-col :span="20">20<el-col>在嵌套一个4和20，反正就是嵌套加嵌套，然后循环再循环
8.5--写接口--所有权限列表--传入一个请求参数--list
8.6--在roleList.vue里面调用接口，一加载就要求显示，所以在钩子函数里面调用
8.7--赋值给空数组
9.添加一条行的结构，在里面写判断，如果没有权限，那么就要让客户先添加权限

第二十五步：实现展示数据的删除
1.写接口方法，在刚才的role_index.js里面写
2.看文档写---删除角色指定权限，传入两个参数
3.在三级权限那里搞一个close取消权限事件，close是tag规定用的，其他的不能用
4.最重要的是我们要在事件里面传入的两个参数，我们要传入用户id和角色id，所以可以传入整行的数据和我们循环时的唯一id
5.在方法对象里面用close事件的方法，传入两个形参然后调用axios，传入两个形参，如果成功了，我们不能用this,init()来刷新页面，因为init会刷新整个表格，造成展开行合并，res.data.data就是实现当前权限删除操作后该角色还拥有的权限数据，就是说，我们点击取消权限后，其实后台已经取消了，只是页面没有显示而已，所以我们可以把点击取消权限后的res.data.data 赋值给 展开行数据，scope.row.children，意思是所以的children
row是行数据，row.children = res.data.data
6.其实在前面的步骤中是有一个Bug的，那就是，如果我们把全部的三级权限取消后，二级和一级权限并没有取消，这个就不符合常规了，我们想的是：如果没有下一级权限了，一二三级都不应该存在
7.所以我们要判断当前权限是否还有下一级权限，如果没有，则需要将这级权限也删除
8.拿到当前行数据的children，然后遍历，先遍历一级权限，如果遍历一级权限后，发现没有二级权限，我们使用递归，这个函数调用自己本身，传入一级权限的id，然后删除自己
9.遍历二级权限，如果没有三级权限，则使用递归，调用自己删除二级权限，这样就实现了取消全部的三级权限，一级和二级权限都不会存在了
10.其实取消全部三级权限的时候，会发现，我们的删除成功的提示框会出现好多次，这个就用户体验不好了，所以我们还要做一个处理
11.在data()函数对象中随便定义一个东西，设置为0，然后就是在刷新展开行数据前面作一个判断
12如果我们定义的 === 0，那就进入这个判断，弹出提示框
13.在这里自增，当第一次进入之后，自增一次，那么，当cnt > 0 就进不来了，就不会弹框了
14.在每个取消权限的按钮中定义 cnt=0; 是想让在data()函数对象中定义的cnt 重置为0，如果我们不重置为0，那么我们在cnt++ 自增之后，cnt > 0 始终大于0，所以我们重新置0

第二十六步：树状图的默认节点显示
1.在tree 树形控件 -- 树节点的选择--复制那些
2.Dialog对话框---自定义内容---打开嵌套表单的dialog--复制里面的内容，然后只留下'收货地址和确定，取消'
3.再用Dialog包裹树形控件
4.分析树形控件的那些属性
4.1---:data="data2" // 数据源，数组
4.2---show-checkbox // 显示复选框
4.3---node-key="id" // 唯一标识当前节点的属性，影响后期节点的数据获取，获取节点数据时可以获取到这个id
4.4---:default-expanded-keys="[2, 3]" // 默认展开的节点,展开子节点默认也会展开父级节点，意味着如果想展开某个节点，只需要获取最底层的节点id即可
4.5---:default-checked-keys="[5]"//默认被选择中的节点
4.6---:default-expand-all='true'// 默认展开所有节点
4.7---:props="defaultProps"> // 配置：节点展示的文本属性 节点的下级数据
5.把4.4的那条属性删了
6.定义两个空数组，一个是加载树形数据的数组--rigthList,另一个是当前角色所拥有的权限id的数组--chkedArr,另一个是因为组件框架规定的，default-checked-keys	默认展开的节点的 key 的数组，要求一个数组
7.把数据源的data2换成加载树形数据的数组
8.默认展开的节点换成数组--default-checked-keys='chkedArr'
9.修改默认的配置选项:props
修改前：
defaultProps: {
          children: 'children',---这children是刚好我们的也是children,所以不用更改
          label: 'label'---相当于的我们要展示出来的那些“权限管理，商品管理这些”
        }
修改后---放在data()函数对象中
defaultProps: {
	label: 'authName', // 设置节点所展示的文本属性--给我们看的
	children: 'children' // 设置子节点点来源的属性，你遍历哪个属性去加载子节点
}

第二十七步：实现树形组件默认数据的加载和实现树形组件数据的默认选择
1.写api接口，其实前面已经写好了，获取权限列表数据的接口就是，当时要求传入一个参数type，里面有两个参数，一个list权限列表，还有一个tree树形的参数
2.给分配角色一个点击事件，给事件传入一个实参，拿到当前行数据
3.在方法里面写弹出角色授权对话框，传入有一个形参
4.让对话框显示
5.加载树形组件的数据
5.1--调用接口方法-传入文档接口要求的另一个参数tree
5.2--赋值给加载树形数据的数组
6.获取权限id，让节点被默认选择，获取当前角色的所有权限的id，添加到chkedArr，因为chkedArr所在的是:default-expand-all，默认展开的节点，我们要知道是哪个展开了，只需要知道角色id就行了
7.我们只需要获取最后一级的id，还要做一个判断，因为如果没有一级或者二级，那我们也拿不到三级的id
8.遍历当前行数据的children,然后判断有没有一级的数据，如果有，再遍历二级，再判断有没有二级的数据，如果有，再遍历三级，然后把三级的id push进数组，那么chkedArr就有东西了，那些默认的数据就会选中了


第二十七步：实现角色授权
1.添加接口方法--重点关注参数--分析
1.1--在获取权限id的时候，应该获取所有层级的id
1.2--因为下一级权限数据应该根据上一级权限数据进行获取
2.根据文档写api接口，取名grantRolesById,传入两个参数，一个是角色roleId,一个是权限rids
3.调用接口方法实现角色权限
3.1--先获取到当前用户所选择所有的权限id,拼接 为以,分隔的字符串
3.2--rids--参数名  权限 ID 列表  以 , 分割的权限 ID 列表--接口文档规定的
4.我们有两种方法取到rids--权限id的字符串
4.1--getHalfCheckedKeys 若节点可被选择（即 show-checkbox 为 true），则返回目前半选中的节点的 key 所组成的数组
4.2--getCheckedKeys 若节点可被选择（即 show-checkbox 为 true），则返回目前被选中的节点的 key 所组成的数组
5.第一种，用concat() 方法用于连接两个或多个数组。
let arr = this.$refs.tree.getHalfCheckedKeys().concat(this.$refs.tree.getCheckedKeys())
6.第二种：解构的方法
let arr = [...this.$refs.tree.getHalfCheckedKeys(), ...this.$refs.tree.getCheckedKeys()]
7.上面两种方法都要转换成字符串数组，用join(',')
8.获取角色id，roleId---现在data()函数对象中定义一个roleId:'',然后我们通过自定义模板拿到当前行数据，在点击弹框的时候，我们就应该获取到角色id，所以我们应该在点击弹框的点击事件里面获取到，this.roleId = row.id
9.调用接口，传入两个参数，一个是角色id,一个是权限id
10.后面就是判断200的常规操作





















